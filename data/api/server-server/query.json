{
    "__meta": {
        "base": "/_matrix/federation/v1",
        "endpoints": [
            {
                "deprecated": false,
                "desc": "Performs a single query request on the receiving homeserver. The query string\narguments are dependent on which type of query is being made. Known query types\nare specified as their own endpoints as an extension to this definition.",
                "example": {
                    "req": "GET /_matrix/federation/v1/query/profile HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/federation/v1/query/{queryType}",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The type of query to make",
                            "key": "queryType",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [],
                "responses": [
                    {
                        "code": 200,
                        "description": "The query response. The schema varies depending on the query being made.",
                        "example": null
                    }
                ],
                "title": "Query for information"
            },
            {
                "deprecated": false,
                "desc": "Performs a query to get the mapped room ID and list of resident homeservers in\nthe room for a given room alias. Homeservers should only query room aliases\nthat belong to the target server (identified by the DNS Name in the alias).\n\nServers may wish to cache the response to this query to avoid requesting the\ninformation too often.",
                "example": {
                    "req": "GET /_matrix/federation/v1/query/directory?room_alias=%23room_alias%3Aexample.org HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/federation/v1/query/directory",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "query": [
                        {
                            "desc": "**Required.** The room alias to query.",
                            "key": "room_alias",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "**Required.** The room ID mapped to the queried room alias.",
                                "key": "room_id",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** An array of server names that are likely to hold the given room. This\nlist may or may not include the server answering the query.",
                                "key": "servers",
                                "required": true,
                                "title": "[string]"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "The corresponding room ID and list of known resident homeservers for the room.",
                        "example": "{\n  \"room_id\": \"!roomid1234:example.org\",\n  \"servers\": [\n    \"example.org\",\n    \"example.com\",\n    \"another.example.com:8449\"\n  ]\n}"
                    },
                    {
                        "code": 404,
                        "description": "The room alias was not found.",
                        "example": "{\n  \"errcode\": \"M_NOT_FOUND\",\n  \"error\": \"Room alias not found.\"\n}"
                    }
                ],
                "title": "Query for the room ID and resident homeservers for a room alias"
            },
            {
                "deprecated": false,
                "desc": "Performs a query to get profile information, such as a display name or avatar,\nfor a given user. Homeservers should only query profiles for users that belong\nto the target server (identified by the DNS Name in the user ID).\n\nServers may wish to cache the response to this query to avoid requesting the\ninformation too often.",
                "example": {
                    "req": "GET /_matrix/federation/v1/query/profile?user_id=%40someone%3Aexample.org HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/federation/v1/query/profile",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "query": [
                        {
                            "desc": "**Required.** The user ID to query.",
                            "key": "user_id",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "The field to query. If specified, the server will only return the given field\nin the response. If not specified, the server will return the full profile for\nthe user. One of: [\"displayname\", \"avatar_url\"]",
                            "key": "field",
                            "required": false,
                            "title": "enum"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "The display name of the user. May be omitted if the user does not have a\ndisplay name set.",
                                "key": "displayname",
                                "required": false,
                                "title": "string"
                            },
                            {
                                "desc": "The avatar URL for the user's avatar. May be omitted if the user does not\nhave an avatar set.",
                                "key": "avatar_url",
                                "required": false,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "The profile for the user. If a ``field`` is specified in the request, only the\nmatching field should be included in the response. If no ``field`` was specified,\nthe response should include the fields of the user's profile that can be made\npublic, such as the display name and avatar.\n\nIf the user does not have a particular field set on their profile, the server\nshould exclude it from the response body or give it the value ``null``.",
                        "example": "{\n  \"displayname\": \"John Doe\",\n  \"avatar_url\": \"mxc://matrix.org/MyC00lAvatar\"\n}"
                    },
                    {
                        "code": 404,
                        "description": "The user does not exist or does not have a profile.",
                        "example": "{\n  \"errcode\": \"M_NOT_FOUND\",\n  \"error\": \"User does not exist.\"\n}"
                    }
                ],
                "title": "Query for profile information about a given user"
            }
        ],
        "group": "query_ss"
    },
    "basePath": "/_matrix/federation/v1",
    "host": "localhost:8448",
    "info": {
        "title": "Matrix Federation Query API",
        "version": "1.0.0"
    },
    "paths": {
        "/query/directory": {
            "get": {
                "description": "Performs a query to get the mapped room ID and list of resident homeservers in\nthe room for a given room alias. Homeservers should only query room aliases\nthat belong to the target server (identified by the DNS Name in the alias).\n\nServers may wish to cache the response to this query to avoid requesting the\ninformation too often.",
                "operationId": "queryRoomDirectory",
                "parameters": [
                    {
                        "description": "The room alias to query.",
                        "in": "query",
                        "name": "room_alias",
                        "required": true,
                        "type": "string",
                        "x-example": "#room_alias:example.org"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The corresponding room ID and list of known resident homeservers for the room.",
                        "examples": {
                            "application/json": {
                                "room_id": "!roomid1234:example.org",
                                "servers": [
                                    "example.org",
                                    "example.com",
                                    "another.example.com:8449"
                                ]
                            }
                        },
                        "schema": {
                            "properties": {
                                "room_id": {
                                    "description": "The room ID mapped to the queried room alias.",
                                    "type": "string",
                                    "x-example": "!roomid1234:example.org"
                                },
                                "servers": {
                                    "description": "An array of server names that are likely to hold the given room. This\nlist may or may not include the server answering the query.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "room_id",
                                "servers"
                            ],
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "The room alias was not found.",
                        "examples": {
                            "application/json": {
                                "errcode": "M_NOT_FOUND",
                                "error": "Room alias not found."
                            }
                        },
                        "schema": {
                            "description": "A Matrix-level Error",
                            "properties": {
                                "errcode": {
                                    "description": "An error code.",
                                    "example": "M_UNKNOWN",
                                    "type": "string"
                                },
                                "error": {
                                    "description": "A human-readable error message.",
                                    "example": "An unknown error occurred",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "errcode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "signedRequest": []
                    }
                ],
                "summary": "Query for the room ID and resident homeservers for a room alias"
            }
        },
        "/query/profile": {
            "get": {
                "description": "Performs a query to get profile information, such as a display name or avatar,\nfor a given user. Homeservers should only query profiles for users that belong\nto the target server (identified by the DNS Name in the user ID).\n\nServers may wish to cache the response to this query to avoid requesting the\ninformation too often.",
                "operationId": "queryProfile",
                "parameters": [
                    {
                        "description": "The user ID to query.",
                        "in": "query",
                        "name": "user_id",
                        "required": true,
                        "type": "string",
                        "x-example": "@someone:example.org"
                    },
                    {
                        "description": "The field to query. If specified, the server will only return the given field\nin the response. If not specified, the server will return the full profile for\nthe user.",
                        "enum": [
                            "displayname",
                            "avatar_url"
                        ],
                        "in": "query",
                        "name": "field",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The profile for the user. If a ``field`` is specified in the request, only the\nmatching field should be included in the response. If no ``field`` was specified,\nthe response should include the fields of the user's profile that can be made\npublic, such as the display name and avatar.\n\nIf the user does not have a particular field set on their profile, the server\nshould exclude it from the response body or give it the value ``null``.",
                        "examples": {
                            "application/json": {
                                "avatar_url": "mxc://matrix.org/MyC00lAvatar",
                                "displayname": "John Doe"
                            }
                        },
                        "schema": {
                            "properties": {
                                "avatar_url": {
                                    "description": "The avatar URL for the user's avatar. May be omitted if the user does not\nhave an avatar set.",
                                    "type": "string",
                                    "x-example": "mxc://matrix.org/MyC00lAvatar"
                                },
                                "displayname": {
                                    "description": "The display name of the user. May be omitted if the user does not have a\ndisplay name set.",
                                    "type": "string",
                                    "x-example": "John Doe"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "The user does not exist or does not have a profile.",
                        "examples": {
                            "application/json": {
                                "errcode": "M_NOT_FOUND",
                                "error": "User does not exist."
                            }
                        },
                        "schema": {
                            "description": "A Matrix-level Error",
                            "properties": {
                                "errcode": {
                                    "description": "An error code.",
                                    "example": "M_UNKNOWN",
                                    "type": "string"
                                },
                                "error": {
                                    "description": "A human-readable error message.",
                                    "example": "An unknown error occurred",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "errcode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "signedRequest": []
                    }
                ],
                "summary": "Query for profile information about a given user"
            }
        },
        "/query/{queryType}": {
            "get": {
                "description": "Performs a single query request on the receiving homeserver. The query string\narguments are dependent on which type of query is being made. Known query types\nare specified as their own endpoints as an extension to this definition.",
                "operationId": "queryInfo",
                "parameters": [
                    {
                        "description": "The type of query to make",
                        "in": "path",
                        "name": "queryType",
                        "required": true,
                        "type": "string",
                        "x-example": "profile"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The query response. The schema varies depending on the query being made."
                    }
                },
                "security": [
                    {
                        "signedRequest": []
                    }
                ],
                "summary": "Query for information"
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "signedRequest": {
            "description": "The ``Authorization`` header defined in the `Authentication`_ section.",
            "in": "header",
            "name": "Authorization",
            "type": "apiKey"
        }
    },
    "swagger": "2.0"
}