{
    "__meta": {
        "base": "/_matrix/key/v2",
        "endpoints": [
            {
                "deprecated": false,
                "desc": "Gets the homeserver's published signing keys.\nThe homeserver may have any number of active keys and may have a\nnumber of old keys.\n\nIntermediate notary servers should cache a response for half of its\nlifetime to avoid serving a stale response. Originating servers should\navoid returning responses that expire in less than an hour to avoid\nrepeated requests for a certificate that is about to expire. Requesting\nservers should limit how frequently they query for certificates to\navoid flooding a server with requests.\n\nIf the server fails to respond to this request, intermediate notary\nservers should continue to return the last response they received\nfrom the server so that the signatures of old events can still be\nchecked.",
                "example": {
                    "req": "GET /_matrix/key/v2/server/ed25519%3Aabc123 HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/key/v2/server/{keyId}",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Deprecated**. Servers should not use this parameter and instead\nopt to return all keys, not just the requested one. The key ID to\nlook up.\n\nWhen excluded, the trailing slash on this endpoint is optional.",
                            "key": "keyId",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": false,
                "res_headers": null,
                "res_tables": [
                    [
                        "Server Keys",
                        null,
                        [
                            {
                                "desc": "**Required.** DNS name of the homeserver.",
                                "key": "server_name",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** Public keys of the homeserver for verifying digital signatures.\n\nThe object's key is the algorithm and version combined (``ed25519`` being the\nalgorithm and ``abc123`` being the version in the example below). Together,\nthis forms the Key ID. The version must have characters matching the regular\nexpression ``[a-zA-Z0-9_]``.",
                                "key": "verify_keys",
                                "required": true,
                                "title": "{string: Verify Key}"
                            },
                            {
                                "desc": "The public keys that the server used to use and when it stopped using them.\n\nThe object's key is the algorithm and version combined (``ed25519`` being the\nalgorithm and ``0ldK3y`` being the version in the example below). Together,\nthis forms the Key ID. The version must have characters matching the regular\nexpression ``[a-zA-Z0-9_]``.",
                                "key": "old_verify_keys",
                                "required": false,
                                "title": "{string: Old Verify Key}"
                            },
                            {
                                "desc": "Digital signatures for this object signed using the ``verify_keys``.\n\nThe signature is calculated using the process described at `Signing\nJSON`_.",
                                "key": "signatures",
                                "required": false,
                                "title": "Signatures"
                            },
                            {
                                "desc": "POSIX timestamp when the list of valid keys should be refreshed. This field MUST\nbe ignored in room versions 1, 2, 3, and 4. Keys used beyond this timestamp MUST\nbe considered invalid, depending on the `room version specification`_.\n\nServers MUST use the lesser of this field and 7 days into the future when\ndetermining if a key is valid. This is to avoid a situation where an attacker\npublishes a key which is valid for a significant amount of time without a way\nfor the homeserver owner to revoke it.",
                                "key": "valid_until_ts",
                                "required": false,
                                "title": "integer"
                            }
                        ]
                    ],
                    [
                        "Verify Key",
                        null,
                        [
                            {
                                "desc": "**Required.** The `Unpadded Base64`_ encoded key.",
                                "key": "key",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ],
                    [
                        "Old Verify Key",
                        null,
                        [
                            {
                                "desc": "**Required.** POSIX timestamp in milliseconds for when this key expired.",
                                "key": "expired_ts",
                                "required": true,
                                "title": "integer"
                            },
                            {
                                "desc": "**Required.** The `Unpadded Base64`_ encoded key.",
                                "key": "key",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "The homeserver's keys",
                        "example": "{\n  \"server_name\": \"example.org\",\n  \"verify_keys\": {\n    \"ed25519:abc123\": {\n      \"key\": \"VGhpcyBzaG91bGQgYmUgYSByZWFsIGVkMjU1MTkgcGF5bG9hZA\"\n    }\n  },\n  \"old_verify_keys\": {\n    \"ed25519:0ldk3y\": {\n      \"expired_ts\": 1532645052628,\n      \"key\": \"VGhpcyBzaG91bGQgYmUgeW91ciBvbGQga2V5J3MgZWQyNTUxOSBwYXlsb2FkLg\"\n    }\n  },\n  \"signatures\": {\n    \"example.org\": {\n      \"ed25519:auto2\": \"VGhpcyBzaG91bGQgYWN0dWFsbHkgYmUgYSBzaWduYXR1cmU\"\n    }\n  },\n  \"valid_until_ts\": 1652262000000\n}"
                    }
                ],
                "title": "Get the homeserver's public key(s)"
            }
        ],
        "group": "keys_server_ss"
    },
    "basePath": "/_matrix/key/v2",
    "host": "localhost:8448",
    "info": {
        "title": "Matrix Federation Key Exchange API",
        "version": "1.0.0"
    },
    "paths": {
        "/server/{keyId}": {
            "get": {
                "description": "Gets the homeserver's published signing keys.\nThe homeserver may have any number of active keys and may have a\nnumber of old keys.\n\nIntermediate notary servers should cache a response for half of its\nlifetime to avoid serving a stale response. Originating servers should\navoid returning responses that expire in less than an hour to avoid\nrepeated requests for a certificate that is about to expire. Requesting\nservers should limit how frequently they query for certificates to\navoid flooding a server with requests.\n\nIf the server fails to respond to this request, intermediate notary\nservers should continue to return the last response they received\nfrom the server so that the signatures of old events can still be\nchecked.",
                "operationId": "getServerKey",
                "parameters": [
                    {
                        "deprecated": true,
                        "description": "**Deprecated**. Servers should not use this parameter and instead\nopt to return all keys, not just the requested one. The key ID to\nlook up.\n\nWhen excluded, the trailing slash on this endpoint is optional.",
                        "in": "path",
                        "name": "keyId",
                        "required": false,
                        "type": "string",
                        "x-example": "ed25519:abc123"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The homeserver's keys",
                        "schema": {
                            "description": "Server keys",
                            "example": {
                                "old_verify_keys": {
                                    "ed25519:0ldk3y": {
                                        "expired_ts": 1532645052628,
                                        "key": "VGhpcyBzaG91bGQgYmUgeW91ciBvbGQga2V5J3MgZWQyNTUxOSBwYXlsb2FkLg"
                                    }
                                },
                                "server_name": "example.org",
                                "signatures": {
                                    "example.org": {
                                        "ed25519:auto2": "VGhpcyBzaG91bGQgYWN0dWFsbHkgYmUgYSBzaWduYXR1cmU"
                                    }
                                },
                                "valid_until_ts": 1652262000000,
                                "verify_keys": {
                                    "ed25519:abc123": {
                                        "key": "VGhpcyBzaG91bGQgYmUgYSByZWFsIGVkMjU1MTkgcGF5bG9hZA"
                                    }
                                }
                            },
                            "properties": {
                                "old_verify_keys": {
                                    "additionalProperties": {
                                        "example": {
                                            "ed25519:0ldK3y": {
                                                "expired_ts": 1532645052628,
                                                "key": "VGhpcyBzaG91bGQgYmUgeW91ciBvbGQga2V5J3MgZWQyNTUxOSBwYXlsb2FkLg"
                                            }
                                        },
                                        "properties": {
                                            "expired_ts": {
                                                "description": "POSIX timestamp in milliseconds for when this key expired.",
                                                "example": 1532645052628,
                                                "format": "int64",
                                                "type": "integer"
                                            },
                                            "key": {
                                                "description": "The `Unpadded Base64`_ encoded key.",
                                                "example": "VGhpcyBzaG91bGQgYmUgeW91ciBvbGQga2V5J3MgZWQyNTUxOSBwYXlsb2FkLg",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "expired_ts",
                                            "key"
                                        ],
                                        "title": "Old Verify Key",
                                        "type": "object"
                                    },
                                    "description": "The public keys that the server used to use and when it stopped using them.\n\nThe object's key is the algorithm and version combined (``ed25519`` being the\nalgorithm and ``0ldK3y`` being the version in the example below). Together,\nthis forms the Key ID. The version must have characters matching the regular\nexpression ``[a-zA-Z0-9_]``.",
                                    "type": "object"
                                },
                                "server_name": {
                                    "description": "DNS name of the homeserver.",
                                    "example": "example.org",
                                    "type": "string"
                                },
                                "signatures": {
                                    "additionalProperties": {
                                        "additionalProperties": {
                                            "type": "string"
                                        },
                                        "type": "object"
                                    },
                                    "description": "Digital signatures for this object signed using the ``verify_keys``.\n\nThe signature is calculated using the process described at `Signing\nJSON`_.",
                                    "title": "Signatures",
                                    "type": "object"
                                },
                                "valid_until_ts": {
                                    "description": "POSIX timestamp when the list of valid keys should be refreshed. This field MUST\nbe ignored in room versions 1, 2, 3, and 4. Keys used beyond this timestamp MUST\nbe considered invalid, depending on the `room version specification`_.\n\nServers MUST use the lesser of this field and 7 days into the future when\ndetermining if a key is valid. This is to avoid a situation where an attacker\npublishes a key which is valid for a significant amount of time without a way\nfor the homeserver owner to revoke it.",
                                    "example": 1052262000000,
                                    "format": "int64",
                                    "type": "integer"
                                },
                                "verify_keys": {
                                    "additionalProperties": {
                                        "example": {
                                            "ed25519:abc123": {
                                                "key": "VGhpcyBzaG91bGQgYmUgYSByZWFsIGVkMjU1MTkgcGF5bG9hZA"
                                            }
                                        },
                                        "properties": {
                                            "key": {
                                                "description": "The `Unpadded Base64`_ encoded key.",
                                                "example": "VGhpcyBzaG91bGQgYmUgYSByZWFsIGVkMjU1MTkgcGF5bG9hZA",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "key"
                                        ],
                                        "title": "Verify Key",
                                        "type": "object"
                                    },
                                    "description": "Public keys of the homeserver for verifying digital signatures.\n\nThe object's key is the algorithm and version combined (``ed25519`` being the\nalgorithm and ``abc123`` being the version in the example below). Together,\nthis forms the Key ID. The version must have characters matching the regular\nexpression ``[a-zA-Z0-9_]``.",
                                    "type": "object"
                                }
                            },
                            "required": [
                                "server_name",
                                "verify_keys"
                            ],
                            "title": "Server Keys",
                            "type": "object"
                        }
                    }
                },
                "summary": "Get the homeserver's public key(s)"
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "swagger": "2.0"
}