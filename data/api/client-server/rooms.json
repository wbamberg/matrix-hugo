{
    "__meta": {
        "base": "/_matrix/client/%CLIENT_MAJOR_VERSION%",
        "endpoints": [
            {
                "deprecated": false,
                "desc": "Get a single event based on ``roomId/eventId``. You must have permission to\nretrieve this event e.g. by being a member in the room for this event.",
                "example": {
                    "req": "GET /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Amatrix.org/event/%24asfDuShaf7Gafaw%3Amatrix.org HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/event/{eventId}",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The ID of the room the event is in.",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "**Required.** The event ID to get.",
                            "key": "eventId",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        "Event",
                        null,
                        [
                            {
                                "desc": "**Required.** The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                "key": "content",
                                "required": true,
                                "title": "object"
                            },
                            {
                                "desc": "**Required.** The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                "key": "type",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "The full event.",
                        "example": "{\n  \"content\": {\n    \"body\": \"This is an example text message\",\n    \"msgtype\": \"m.text\",\n    \"format\": \"org.matrix.custom.html\",\n    \"formatted_body\": \"<b>This is an example text message</b>\"\n  },\n  \"type\": \"m.room.message\",\n  \"event_id\": \"$143273582443PhrSn:example.org\",\n  \"room_id\": \"!636q39766251:matrix.org\",\n  \"sender\": \"@example:example.org\",\n  \"origin_server_ts\": 1432735824653,\n  \"unsigned\": {\n    \"age\": 1234\n  }\n}"
                    },
                    {
                        "code": 404,
                        "description": "The event was not found or you do not have permission to read this event.",
                        "example": "{\n  \"errcode\": \"M_NOT_FOUND\",\n  \"error\": \"Event not found.\"\n}"
                    }
                ],
                "title": "Get a single event by event ID."
            },
            {
                "deprecated": false,
                "desc": ".. For backwards compatibility with older links...\n.. _`get-matrix-client-%CLIENT_MAJOR_VERSION%-rooms-roomid-state-eventtype`:\n\nLooks up the contents of a state event in a room. If the user is\njoined to the room then the state is taken from the current\nstate of the room. If the user has left the room then the state is\ntaken from the state of the room when they left.",
                "example": {
                    "req": "GET /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Aexample.com/state/m.room.name/ HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/state/{eventType}/{stateKey}",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The room to look up the state in.",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "**Required.** The type of state to look up.",
                            "key": "eventType",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "**Required.** The key of the state to look up. Defaults to an empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
                            "key": "stateKey",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [],
                "responses": [
                    {
                        "code": 200,
                        "description": "The content of the state event.",
                        "example": "{\n  \"name\": \"Example room name\"\n}"
                    },
                    {
                        "code": 403,
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n",
                        "example": null
                    },
                    {
                        "code": 404,
                        "description": "The room has no state with the given type or key.",
                        "example": null
                    }
                ],
                "title": "Get the state identified by the type and key."
            },
            {
                "deprecated": false,
                "desc": "Get the state events for the current state of a room.",
                "example": {
                    "req": "GET /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Aexample.com/state HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/state",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The room to look up the state for.",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "If the user is a member of the room this will be the\ncurrent state of the room as a list of events. If the user\nhas left the room then this will be the state of the room\nwhen they left as a list of events.",
                                "key": "<body>",
                                "required": false,
                                "title": "[StateEvent]"
                            }
                        ]
                    ],
                    [
                        "StateEvent",
                        null,
                        [
                            {
                                "desc": "**Required.** The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                "key": "content",
                                "required": true,
                                "title": "object"
                            },
                            {
                                "desc": "**Required.** The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                "key": "type",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** The globally unique event identifier.",
                                "key": "event_id",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** Contains the fully-qualified ID of the user who sent this event.",
                                "key": "sender",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** Timestamp in milliseconds on originating homeserver when this event was sent.",
                                "key": "origin_server_ts",
                                "required": true,
                                "title": "integer"
                            },
                            {
                                "desc": "Contains optional extra information about the event.",
                                "key": "unsigned",
                                "required": false,
                                "title": "UnsignedData"
                            },
                            {
                                "desc": "**Required.** The ID of the room associated with this event. Will not be present on events\nthat arrive through ``/sync``, despite being required everywhere else.",
                                "key": "room_id",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.",
                                "key": "prev_content",
                                "required": false,
                                "title": "EventContent"
                            },
                            {
                                "desc": "**Required.** A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.\nState keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.",
                                "key": "state_key",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ],
                    [
                        "UnsignedData",
                        null,
                        [
                            {
                                "desc": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "key": "age",
                                "required": false,
                                "title": "integer"
                            },
                            {
                                "desc": "The event that redacted this event, if any.",
                                "key": "redacted_because",
                                "required": false,
                                "title": "Event"
                            },
                            {
                                "desc": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                "key": "transaction_id",
                                "required": false,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "The current state of the room",
                        "example": "[\n  {\n    \"content\": {\n      \"join_rule\": \"public\"\n    },\n    \"type\": \"m.room.join_rules\",\n    \"event_id\": \"$143273582443PhrSn:example.org\",\n    \"room_id\": \"!636q39766251:example.com\",\n    \"sender\": \"@example:example.org\",\n    \"origin_server_ts\": 1432735824653,\n    \"unsigned\": {\n      \"age\": 1234\n    },\n    \"state_key\": \"\"\n  },\n  {\n    \"content\": {\n      \"membership\": \"join\",\n      \"avatar_url\": \"mxc://example.org/SEsfnsuifSDFSSEF\",\n      \"displayname\": \"Alice Margatroid\"\n    },\n    \"type\": \"m.room.member\",\n    \"event_id\": \"$143273582443PhrSn:example.org\",\n    \"room_id\": \"!636q39766251:example.com\",\n    \"sender\": \"@example:example.org\",\n    \"origin_server_ts\": 1432735824653,\n    \"unsigned\": {\n      \"age\": 1234\n    },\n    \"state_key\": \"@alice:example.org\"\n  },\n  {\n    \"content\": {\n      \"creator\": \"@example:example.org\",\n      \"room_version\": \"1\",\n      \"m.federate\": true,\n      \"predecessor\": {\n        \"event_id\": \"$something:example.org\",\n        \"room_id\": \"!oldroom:example.org\"\n      }\n    },\n    \"type\": \"m.room.create\",\n    \"event_id\": \"$143273582443PhrSn:example.org\",\n    \"room_id\": \"!636q39766251:example.com\",\n    \"sender\": \"@example:example.org\",\n    \"origin_server_ts\": 1432735824653,\n    \"unsigned\": {\n      \"age\": 1234\n    },\n    \"state_key\": \"\"\n  },\n  {\n    \"content\": {\n      \"ban\": 50,\n      \"events\": {\n        \"m.room.name\": 100,\n        \"m.room.power_levels\": 100\n      },\n      \"events_default\": 0,\n      \"invite\": 50,\n      \"kick\": 50,\n      \"redact\": 50,\n      \"state_default\": 50,\n      \"users\": {\n        \"@example:localhost\": 100\n      },\n      \"users_default\": 0,\n      \"notifications\": {\n        \"room\": 20\n      }\n    },\n    \"type\": \"m.room.power_levels\",\n    \"event_id\": \"$143273582443PhrSn:example.org\",\n    \"room_id\": \"!636q39766251:example.com\",\n    \"sender\": \"@example:example.org\",\n    \"origin_server_ts\": 1432735824653,\n    \"unsigned\": {\n      \"age\": 1234\n    },\n    \"state_key\": \"\"\n  }\n]"
                    },
                    {
                        "code": 403,
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n",
                        "example": null
                    }
                ],
                "title": "Get all state events in the current state of a room."
            },
            {
                "deprecated": false,
                "desc": "Get the list of members for this room.",
                "example": {
                    "req": "GET /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Aexample.com/members?at=YWxsCgpOb25lLDM1ODcwOA&membership=join&not_membership=leave HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/members",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The room to get the member events for.",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        }
                    ],
                    "query": [
                        {
                            "desc": "The point in time (pagination token) to return members for in the room.\nThis token can be obtained from a ``prev_batch`` token returned for\neach room by the sync API. Defaults to the current state of the room,\nas determined by the server.",
                            "key": "at",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "The kind of membership to filter for. Defaults to no filtering if\nunspecified. When specified alongside ``not_membership``, the two\nparameters create an 'or' condition: either the membership *is*\nthe same as ``membership`` **or** *is not* the same as ``not_membership``. One of: [\"join\", \"invite\", \"leave\", \"ban\"]",
                            "key": "membership",
                            "required": false,
                            "title": "enum"
                        },
                        {
                            "desc": "The kind of membership to exclude from the results. Defaults to no\nfiltering if unspecified. One of: [\"join\", \"invite\", \"leave\", \"ban\"]",
                            "key": "not_membership",
                            "required": false,
                            "title": "enum"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "",
                                "key": "chunk",
                                "required": false,
                                "title": "[MemberEvent]"
                            }
                        ]
                    ],
                    [
                        "MemberEvent",
                        null,
                        [
                            {
                                "desc": "**Required.**",
                                "key": "content",
                                "required": true,
                                "title": "EventContent"
                            },
                            {
                                "desc": "**Required.** Must be 'm.room.member'.",
                                "key": "type",
                                "required": true,
                                "title": "enum"
                            },
                            {
                                "desc": "**Required.** The globally unique event identifier.",
                                "key": "event_id",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** Contains the fully-qualified ID of the user who sent this event.",
                                "key": "sender",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** Timestamp in milliseconds on originating homeserver when this event was sent.",
                                "key": "origin_server_ts",
                                "required": true,
                                "title": "integer"
                            },
                            {
                                "desc": "Contains optional extra information about the event.",
                                "key": "unsigned",
                                "required": false,
                                "title": "UnsignedData"
                            },
                            {
                                "desc": "**Required.** The ID of the room associated with this event. Will not be present on events\nthat arrive through ``/sync``, despite being required everywhere else.",
                                "key": "room_id",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.",
                                "key": "prev_content",
                                "required": false,
                                "title": "EventContent"
                            },
                            {
                                "desc": "**Required.** The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is\n``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,\nunlike other events. Regular authorisation rules still apply.",
                                "key": "state_key",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ],
                    [
                        "EventContent",
                        null,
                        [
                            {
                                "desc": "The avatar URL for this user, if any.",
                                "key": "avatar_url",
                                "required": false,
                                "title": "string"
                            },
                            {
                                "desc": "The display name for this user, if any.",
                                "key": "displayname",
                                "required": false,
                                "title": "string or null"
                            },
                            {
                                "desc": "**Required.** The membership state of the user. One of: [\"invite\", \"join\", \"knock\", \"leave\", \"ban\"]",
                                "key": "membership",
                                "required": true,
                                "title": "enum"
                            },
                            {
                                "desc": "Flag indicating if the room containing this event was created with the intention of being a direct chat. See `Direct Messaging`_.",
                                "key": "is_direct",
                                "required": false,
                                "title": "boolean"
                            },
                            {
                                "desc": "",
                                "key": "third_party_invite",
                                "required": false,
                                "title": "Invite"
                            }
                        ]
                    ],
                    [
                        "Invite",
                        null,
                        [
                            {
                                "desc": "**Required.** A name which can be displayed to represent the user instead of their third party identifier",
                                "key": "display_name",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.",
                                "key": "signed",
                                "required": true,
                                "title": "signed"
                            }
                        ]
                    ],
                    [
                        "signed",
                        null,
                        [
                            {
                                "desc": "**Required.** The invited matrix user ID. Must be equal to the user_id property of the event.",
                                "key": "mxid",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.",
                                "key": "signatures",
                                "required": true,
                                "title": "Signatures"
                            },
                            {
                                "desc": "**Required.** The token property of the containing third_party_invite object.",
                                "key": "token",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ],
                    [
                        "UnsignedData",
                        null,
                        [
                            {
                                "desc": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                "key": "age",
                                "required": false,
                                "title": "integer"
                            },
                            {
                                "desc": "The event that redacted this event, if any.",
                                "key": "redacted_because",
                                "required": false,
                                "title": "Event"
                            },
                            {
                                "desc": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                "key": "transaction_id",
                                "required": false,
                                "title": "string"
                            },
                            {
                                "desc": "A subset of the state of the room at the time of the invite, if ``membership`` is ``invite``. Note that this state is informational, and SHOULD NOT be trusted; once the client has joined the room, it SHOULD fetch the live state from the server and discard the invite_room_state. Also, clients must not rely on any particular state being present here; they SHOULD behave properly (with possibly a degraded but not a broken experience) in the absence of any particular events here. If they are set on the room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``, ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.",
                                "key": "invite_room_state",
                                "required": false,
                                "title": "[StrippedState]"
                            }
                        ]
                    ],
                    [
                        "StrippedState",
                        null,
                        [
                            {
                                "desc": "**Required.** The ``content`` for the event.",
                                "key": "content",
                                "required": true,
                                "title": "EventContent"
                            },
                            {
                                "desc": "**Required.** The ``state_key`` for the event.",
                                "key": "state_key",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** The ``type`` for the event.",
                                "key": "type",
                                "required": true,
                                "title": "string"
                            },
                            {
                                "desc": "**Required.** The ``sender`` for the event.",
                                "key": "sender",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "A list of members of the room. If you are joined to the room then\nthis will be the current members of the room. If you have left the\nroom then this will be the members of the room when you left.",
                        "example": "{\n  \"chunk\": [\n    {\n      \"content\": {\n        \"membership\": \"join\",\n        \"avatar_url\": \"mxc://example.org/SEsfnsuifSDFSSEF\",\n        \"displayname\": \"Alice Margatroid\"\n      },\n      \"type\": \"m.room.member\",\n      \"event_id\": \"$143273582443PhrSn:example.org\",\n      \"room_id\": \"!636q39766251:example.com\",\n      \"sender\": \"@example:example.org\",\n      \"origin_server_ts\": 1432735824653,\n      \"unsigned\": {\n        \"age\": 1234\n      },\n      \"state_key\": \"@alice:example.org\"\n    }\n  ]\n}"
                    },
                    {
                        "code": 403,
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n",
                        "example": null
                    }
                ],
                "title": "Get the m.room.member events for the room."
            },
            {
                "deprecated": false,
                "desc": "This API returns a map of MXIDs to member info objects for members of the room. The current user must be in the room for it to work, unless it is an Application Service in which case any of the AS's users must be in the room. This API is primarily for Application Services and should be faster to respond than ``/members`` as it can be implemented more efficiently on the server.",
                "example": {
                    "req": "GET /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Aexample.com/joined_members HTTP/1.1\n\n"
                },
                "method": "GET",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/joined_members",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The room to get the members of.",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "A map from user ID to a RoomMember object.",
                                "key": "joined",
                                "required": false,
                                "title": "{string: RoomMember}"
                            }
                        ]
                    ],
                    [
                        "RoomMember",
                        null,
                        [
                            {
                                "desc": "The display name of the user this object is representing.",
                                "key": "display_name",
                                "required": false,
                                "title": "string"
                            },
                            {
                                "desc": "The mxc avatar url of the user this object is representing.",
                                "key": "avatar_url",
                                "required": false,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "A map of MXID to room member objects.",
                        "example": "{\n  \"joined\": {\n    \"@bar:example.com\": {\n      \"display_name\": \"Bar\",\n      \"avatar_url\": \"mxc://riot.ovh/printErCATzZijQsSDWorRaK\"\n    }\n  }\n}"
                    },
                    {
                        "code": 403,
                        "description": "You aren't a member of the room.\n",
                        "example": null
                    }
                ],
                "title": "Gets the list of currently joined users and their profile data."
            }
        ],
        "group": "rooms_cs"
    },
    "basePath": "/_matrix/client/%CLIENT_MAJOR_VERSION%",
    "consumes": [
        "application/json"
    ],
    "host": "localhost:8008",
    "info": {
        "title": "Matrix Client-Server Rooms API",
        "version": "1.0.0"
    },
    "paths": {
        "/rooms/{roomId}/event/{eventId}": {
            "get": {
                "description": "Get a single event based on ``roomId/eventId``. You must have permission to\nretrieve this event e.g. by being a member in the room for this event.",
                "operationId": "getOneRoomEvent",
                "parameters": [
                    {
                        "description": "The ID of the room the event is in.",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:matrix.org"
                    },
                    {
                        "description": "The event ID to get.",
                        "in": "path",
                        "name": "eventId",
                        "required": true,
                        "type": "string",
                        "x-example": "$asfDuShaf7Gafaw:matrix.org"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The full event.",
                        "examples": {
                            "application/json": {
                                "content": {
                                    "body": "This is an example text message",
                                    "format": "org.matrix.custom.html",
                                    "formatted_body": "<b>This is an example text message</b>",
                                    "msgtype": "m.text"
                                },
                                "event_id": "$143273582443PhrSn:example.org",
                                "origin_server_ts": 1432735824653,
                                "room_id": "!636q39766251:matrix.org",
                                "sender": "@example:example.org",
                                "type": "m.room.message",
                                "unsigned": {
                                    "age": 1234
                                }
                            }
                        },
                        "schema": {
                            "allOf": [
                                {
                                    "description": "The basic set of fields all events must have.",
                                    "properties": {
                                        "content": {
                                            "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                            "type": "object"
                                        },
                                        "type": {
                                            "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type",
                                        "content"
                                    ],
                                    "title": "Event",
                                    "type": "object"
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "The event was not found or you do not have permission to read this event.",
                        "examples": {
                            "application/json": {
                                "errcode": "M_NOT_FOUND",
                                "error": "Event not found."
                            }
                        },
                        "schema": {
                            "description": "A Matrix-level Error",
                            "properties": {
                                "errcode": {
                                    "description": "An error code.",
                                    "example": "M_UNKNOWN",
                                    "type": "string"
                                },
                                "error": {
                                    "description": "A human-readable error message.",
                                    "example": "An unknown error occurred",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "errcode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Get a single event by event ID.",
                "tags": [
                    "Room participation"
                ]
            }
        },
        "/rooms/{roomId}/joined_members": {
            "get": {
                "description": "This API returns a map of MXIDs to member info objects for members of the room. The current user must be in the room for it to work, unless it is an Application Service in which case any of the AS's users must be in the room. This API is primarily for Application Services and should be faster to respond than ``/members`` as it can be implemented more efficiently on the server.",
                "operationId": "getJoinedMembersByRoom",
                "parameters": [
                    {
                        "description": "The room to get the members of.",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:example.com"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A map of MXID to room member objects.",
                        "examples": {
                            "application/json": {
                                "joined": {
                                    "@bar:example.com": {
                                        "avatar_url": "mxc://riot.ovh/printErCATzZijQsSDWorRaK",
                                        "display_name": "Bar"
                                    }
                                }
                            }
                        },
                        "schema": {
                            "properties": {
                                "joined": {
                                    "additionalProperties": {
                                        "properties": {
                                            "avatar_url": {
                                                "description": "The mxc avatar url of the user this object is representing.",
                                                "type": "string"
                                            },
                                            "display_name": {
                                                "description": "The display name of the user this object is representing.",
                                                "type": "string"
                                            }
                                        },
                                        "title": "RoomMember",
                                        "type": "object"
                                    },
                                    "description": "A map from user ID to a RoomMember object.",
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "You aren't a member of the room.\n"
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Gets the list of currently joined users and their profile data.",
                "tags": [
                    "Room participation"
                ]
            }
        },
        "/rooms/{roomId}/members": {
            "get": {
                "description": "Get the list of members for this room.",
                "operationId": "getMembersByRoom",
                "parameters": [
                    {
                        "description": "The room to get the member events for.",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:example.com"
                    },
                    {
                        "description": "The point in time (pagination token) to return members for in the room.\nThis token can be obtained from a ``prev_batch`` token returned for\neach room by the sync API. Defaults to the current state of the room,\nas determined by the server.",
                        "in": "query",
                        "name": "at",
                        "type": "string",
                        "x-example": "YWxsCgpOb25lLDM1ODcwOA"
                    },
                    {
                        "description": "The kind of membership to filter for. Defaults to no filtering if\nunspecified. When specified alongside ``not_membership``, the two\nparameters create an 'or' condition: either the membership *is*\nthe same as ``membership`` **or** *is not* the same as ``not_membership``.",
                        "enum": [
                            "join",
                            "invite",
                            "leave",
                            "ban"
                        ],
                        "in": "query",
                        "name": "membership",
                        "type": "string",
                        "x-example": "join"
                    },
                    {
                        "description": "The kind of membership to exclude from the results. Defaults to no\nfiltering if unspecified.",
                        "enum": [
                            "join",
                            "invite",
                            "leave",
                            "ban"
                        ],
                        "in": "query",
                        "name": "not_membership",
                        "type": "string",
                        "x-example": "leave"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of members of the room. If you are joined to the room then\nthis will be the current members of the room. If you have left the\nroom then this will be the members of the room when you left.",
                        "examples": {
                            "application/json": {
                                "chunk": [
                                    {
                                        "content": {
                                            "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                                            "displayname": "Alice Margatroid",
                                            "membership": "join"
                                        },
                                        "event_id": "$143273582443PhrSn:example.org",
                                        "origin_server_ts": 1432735824653,
                                        "room_id": "!636q39766251:example.com",
                                        "sender": "@example:example.org",
                                        "state_key": "@alice:example.org",
                                        "type": "m.room.member",
                                        "unsigned": {
                                            "age": 1234
                                        }
                                    }
                                ]
                            }
                        },
                        "schema": {
                            "properties": {
                                "chunk": {
                                    "items": {
                                        "allOf": [
                                            {
                                                "allOf": [
                                                    {
                                                        "allOf": [
                                                            {
                                                                "allOf": [
                                                                    {
                                                                        "allOf": [
                                                                            {
                                                                                "description": "The basic set of fields all events must have.",
                                                                                "properties": {
                                                                                    "content": {
                                                                                        "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": {
                                                                                        "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "type",
                                                                                    "content"
                                                                                ],
                                                                                "title": "Event",
                                                                                "type": "object"
                                                                            }
                                                                        ],
                                                                        "description": "In addition to the Event fields, Room Events have the following additional fields.",
                                                                        "properties": {
                                                                            "event_id": {
                                                                                "description": "The globally unique event identifier.",
                                                                                "type": "string"
                                                                            },
                                                                            "origin_server_ts": {
                                                                                "description": "Timestamp in milliseconds on originating homeserver when this event was sent.",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "sender": {
                                                                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                                                                "type": "string"
                                                                            },
                                                                            "unsigned": {
                                                                                "description": "Contains optional extra information about the event.",
                                                                                "properties": {
                                                                                    "age": {
                                                                                        "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "redacted_because": {
                                                                                        "description": "The event that redacted this event, if any.",
                                                                                        "title": "Event",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "transaction_id": {
                                                                                        "description": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "title": "UnsignedData",
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "event_id",
                                                                            "sender",
                                                                            "origin_server_ts"
                                                                        ],
                                                                        "title": "SyncRoomEvent",
                                                                        "type": "object"
                                                                    }
                                                                ],
                                                                "description": "Room Events have the following fields.",
                                                                "properties": {
                                                                    "room_id": {
                                                                        "description": "The ID of the room associated with this event. Will not be present on events\nthat arrive through ``/sync``, despite being required everywhere else.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "room_id"
                                                                ],
                                                                "title": "RoomEvent",
                                                                "type": "object"
                                                            },
                                                            {
                                                                "allOf": [
                                                                    {
                                                                        "allOf": [
                                                                            {
                                                                                "description": "The basic set of fields all events must have.",
                                                                                "properties": {
                                                                                    "content": {
                                                                                        "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": {
                                                                                        "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "type",
                                                                                    "content"
                                                                                ],
                                                                                "title": "Event",
                                                                                "type": "object"
                                                                            }
                                                                        ],
                                                                        "description": "In addition to the Event fields, Room Events have the following additional fields.",
                                                                        "properties": {
                                                                            "event_id": {
                                                                                "description": "The globally unique event identifier.",
                                                                                "type": "string"
                                                                            },
                                                                            "origin_server_ts": {
                                                                                "description": "Timestamp in milliseconds on originating homeserver when this event was sent.",
                                                                                "format": "int64",
                                                                                "type": "integer"
                                                                            },
                                                                            "sender": {
                                                                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                                                                "type": "string"
                                                                            },
                                                                            "unsigned": {
                                                                                "description": "Contains optional extra information about the event.",
                                                                                "properties": {
                                                                                    "age": {
                                                                                        "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "redacted_because": {
                                                                                        "description": "The event that redacted this event, if any.",
                                                                                        "title": "Event",
                                                                                        "type": "object"
                                                                                    },
                                                                                    "transaction_id": {
                                                                                        "description": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "title": "UnsignedData",
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "event_id",
                                                                            "sender",
                                                                            "origin_server_ts"
                                                                        ],
                                                                        "title": "SyncRoomEvent",
                                                                        "type": "object"
                                                                    }
                                                                ],
                                                                "description": "In addition to the Room Event fields, State Events have the following additional fields.",
                                                                "properties": {
                                                                    "prev_content": {
                                                                        "description": "Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.",
                                                                        "title": "EventContent",
                                                                        "type": "object"
                                                                    },
                                                                    "state_key": {
                                                                        "description": "A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.\nState keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "state_key"
                                                                ],
                                                                "title": "SyncStateEvent",
                                                                "type": "object"
                                                            }
                                                        ],
                                                        "description": "State Events have the following fields.",
                                                        "title": "StateEvent",
                                                        "type": "object"
                                                    }
                                                ],
                                                "description": "Adjusts the membership state for a user in a room. It is preferable to use the membership APIs (``/rooms/<room id>/invite`` etc) when performing membership actions rather than adjusting the state directly as there are a restricted set of valid transformations. For example, user A cannot force user B to join a room, and trying to force this state change directly will fail.\n\nThe following membership states are specified:\n\n- ``invite`` - The user has been invited to join a room, but has not yet joined it. They may not participate in the room until they join.\n\n- ``join`` - The user has joined the room (possibly after accepting an invite), and may participate in it.\n\n- ``leave`` - The user was once joined to the room, but has since left (possibly by choice, or possibly by being kicked).\n\n- ``ban`` - The user has been banned from the room, and is no longer allowed to join it until they are un-banned from the room (by having their membership state set to a value other than ``ban``).\n\n- ``knock`` - This is a reserved word, which currently has no meaning.\n\nThe ``third_party_invite`` property will be set if this invite is an ``invite`` event and is the successor of an ``m.room.third_party_invite`` event, and absent otherwise.\n\nThis event may also include an ``invite_room_state`` key inside the event's ``unsigned`` data.\nIf present, this contains an array of ``StrippedState`` Events. These events provide information\non a subset of state events such as the room name.\n\nThe user for which a membership applies is represented by the ``state_key``. Under some conditions,\nthe ``sender`` and ``state_key`` may not match - this may be interpreted as the ``sender`` affecting\nthe membership state of the ``state_key`` user.\n\nThe ``membership`` for a given user can change over time. The table below represents the various changes\nover time and how clients and servers must interpret those changes. Previous membership can be retrieved\nfrom the ``prev_content`` object on an event. If not present, the user's previous membership must be assumed\nas ``leave``.\n\n.. TODO: Improve how this table is written? We use a csv-table to get around vertical header restrictions.\n\n.. csv-table::\n  :header-rows: 1\n  :stub-columns: 1\n\n  \"\",\"to ``invite``\",\"to ``join``\",\"to ``leave``\",\"to ``ban``\",\"to ``knock``\"\n  \"from ``invite``\",\"No change.\",\"User joined the room.\",\"If the ``state_key`` is the same as the ``sender``, the user rejected the invite. Otherwise, the ``state_key`` user had their invite revoked.\",\"User was banned.\",\"Not implemented.\"\n  \"from ``join``\",\"Must never happen.\",\"``displayname`` or ``avatar_url`` changed.\",\"If the ``state_key`` is the same as the ``sender``, the user left. Otherwise, the ``state_key`` user was kicked.\",\"User was kicked and banned.\",\"Not implemented.\"\n  \"from ``leave``\",\"New invitation sent.\",\"User joined.\",\"No change.\",\"User was banned.\",\"Not implemented.\"\n  \"from ``ban``\",\"Must never happen.\",\"Must never happen.\",\"User was unbanned.\",\"No change.\",\"Not implemented.\"\n  \"from ``knock``\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\"",
                                                "properties": {
                                                    "content": {
                                                        "properties": {
                                                            "avatar_url": {
                                                                "description": "The avatar URL for this user, if any.",
                                                                "type": "string"
                                                            },
                                                            "displayname": {
                                                                "description": "The display name for this user, if any.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "is_direct": {
                                                                "description": "Flag indicating if the room containing this event was created with the intention of being a direct chat. See `Direct Messaging`_.",
                                                                "type": "boolean"
                                                            },
                                                            "membership": {
                                                                "description": "The membership state of the user.",
                                                                "enum": [
                                                                    "invite",
                                                                    "join",
                                                                    "knock",
                                                                    "leave",
                                                                    "ban"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "third_party_invite": {
                                                                "properties": {
                                                                    "display_name": {
                                                                        "description": "A name which can be displayed to represent the user instead of their third party identifier",
                                                                        "type": "string"
                                                                    },
                                                                    "signed": {
                                                                        "description": "A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.",
                                                                        "properties": {
                                                                            "mxid": {
                                                                                "description": "The invited matrix user ID. Must be equal to the user_id property of the event.",
                                                                                "type": "string"
                                                                            },
                                                                            "signatures": {
                                                                                "additionalProperties": {
                                                                                    "additionalProperties": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "description": "A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.",
                                                                                "title": "Signatures",
                                                                                "type": "object"
                                                                            },
                                                                            "token": {
                                                                                "description": "The token property of the containing third_party_invite object.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "mxid",
                                                                            "signatures",
                                                                            "token"
                                                                        ],
                                                                        "title": "signed",
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "display_name",
                                                                    "signed"
                                                                ],
                                                                "title": "Invite",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "required": [
                                                            "membership"
                                                        ],
                                                        "title": "EventContent",
                                                        "type": "object"
                                                    },
                                                    "state_key": {
                                                        "description": "The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is\n``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,\nunlike other events. Regular authorisation rules still apply.",
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "m.room.member"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "unsigned": {
                                                        "allOf": [
                                                            {
                                                                "description": "Contains optional extra information about the event.",
                                                                "properties": {
                                                                    "age": {
                                                                        "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                                        "type": "integer"
                                                                    },
                                                                    "redacted_because": {
                                                                        "description": "The event that redacted this event, if any.",
                                                                        "title": "Event",
                                                                        "type": "object"
                                                                    },
                                                                    "transaction_id": {
                                                                        "description": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "title": "UnsignedData",
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "invite_room_state": {
                                                                        "description": "A subset of the state of the room at the time of the invite, if ``membership`` is ``invite``. Note that this state is informational, and SHOULD NOT be trusted; once the client has joined the room, it SHOULD fetch the live state from the server and discard the invite_room_state. Also, clients must not rely on any particular state being present here; they SHOULD behave properly (with possibly a degraded but not a broken experience) in the absence of any particular events here. If they are set on the room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``, ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.",
                                                                        "items": {
                                                                            "description": "A stripped down state event, with only the ``type``, ``state_key``,\n``sender``, and ``content`` keys.",
                                                                            "properties": {
                                                                                "content": {
                                                                                    "description": "The ``content`` for the event.",
                                                                                    "title": "EventContent",
                                                                                    "type": "object"
                                                                                },
                                                                                "sender": {
                                                                                    "description": "The ``sender`` for the event.",
                                                                                    "type": "string"
                                                                                },
                                                                                "state_key": {
                                                                                    "description": "The ``state_key`` for the event.",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "description": "The ``type`` for the event.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "type",
                                                                                "state_key",
                                                                                "content",
                                                                                "sender"
                                                                            ],
                                                                            "title": "StrippedState",
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "title": "The current membership state of a user in the room.",
                                                "type": "object"
                                            }
                                        ],
                                        "title": "MemberEvent",
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n"
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Get the m.room.member events for the room.",
                "tags": [
                    "Room participation"
                ]
            }
        },
        "/rooms/{roomId}/state": {
            "get": {
                "description": "Get the state events for the current state of a room.",
                "operationId": "getRoomState",
                "parameters": [
                    {
                        "description": "The room to look up the state for.",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:example.com"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The current state of the room",
                        "examples": {
                            "application/json": [
                                {
                                    "content": {
                                        "join_rule": "public"
                                    },
                                    "event_id": "$143273582443PhrSn:example.org",
                                    "origin_server_ts": 1432735824653,
                                    "room_id": "!636q39766251:example.com",
                                    "sender": "@example:example.org",
                                    "state_key": "",
                                    "type": "m.room.join_rules",
                                    "unsigned": {
                                        "age": 1234
                                    }
                                },
                                {
                                    "content": {
                                        "avatar_url": "mxc://example.org/SEsfnsuifSDFSSEF",
                                        "displayname": "Alice Margatroid",
                                        "membership": "join"
                                    },
                                    "event_id": "$143273582443PhrSn:example.org",
                                    "origin_server_ts": 1432735824653,
                                    "room_id": "!636q39766251:example.com",
                                    "sender": "@example:example.org",
                                    "state_key": "@alice:example.org",
                                    "type": "m.room.member",
                                    "unsigned": {
                                        "age": 1234
                                    }
                                },
                                {
                                    "content": {
                                        "creator": "@example:example.org",
                                        "m.federate": true,
                                        "predecessor": {
                                            "event_id": "$something:example.org",
                                            "room_id": "!oldroom:example.org"
                                        },
                                        "room_version": "1"
                                    },
                                    "event_id": "$143273582443PhrSn:example.org",
                                    "origin_server_ts": 1432735824653,
                                    "room_id": "!636q39766251:example.com",
                                    "sender": "@example:example.org",
                                    "state_key": "",
                                    "type": "m.room.create",
                                    "unsigned": {
                                        "age": 1234
                                    }
                                },
                                {
                                    "content": {
                                        "ban": 50,
                                        "events": {
                                            "m.room.name": 100,
                                            "m.room.power_levels": 100
                                        },
                                        "events_default": 0,
                                        "invite": 50,
                                        "kick": 50,
                                        "notifications": {
                                            "room": 20
                                        },
                                        "redact": 50,
                                        "state_default": 50,
                                        "users": {
                                            "@example:localhost": 100
                                        },
                                        "users_default": 0
                                    },
                                    "event_id": "$143273582443PhrSn:example.org",
                                    "origin_server_ts": 1432735824653,
                                    "room_id": "!636q39766251:example.com",
                                    "sender": "@example:example.org",
                                    "state_key": "",
                                    "type": "m.room.power_levels",
                                    "unsigned": {
                                        "age": 1234
                                    }
                                }
                            ]
                        },
                        "schema": {
                            "description": "If the user is a member of the room this will be the\ncurrent state of the room as a list of events. If the user\nhas left the room then this will be the state of the room\nwhen they left as a list of events.",
                            "items": {
                                "allOf": [
                                    {
                                        "allOf": [
                                            {
                                                "allOf": [
                                                    {
                                                        "allOf": [
                                                            {
                                                                "description": "The basic set of fields all events must have.",
                                                                "properties": {
                                                                    "content": {
                                                                        "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                                                        "type": "object"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "type",
                                                                    "content"
                                                                ],
                                                                "title": "Event",
                                                                "type": "object"
                                                            }
                                                        ],
                                                        "description": "In addition to the Event fields, Room Events have the following additional fields.",
                                                        "properties": {
                                                            "event_id": {
                                                                "description": "The globally unique event identifier.",
                                                                "type": "string"
                                                            },
                                                            "origin_server_ts": {
                                                                "description": "Timestamp in milliseconds on originating homeserver when this event was sent.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "sender": {
                                                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                                                "type": "string"
                                                            },
                                                            "unsigned": {
                                                                "description": "Contains optional extra information about the event.",
                                                                "properties": {
                                                                    "age": {
                                                                        "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                                        "type": "integer"
                                                                    },
                                                                    "redacted_because": {
                                                                        "description": "The event that redacted this event, if any.",
                                                                        "title": "Event",
                                                                        "type": "object"
                                                                    },
                                                                    "transaction_id": {
                                                                        "description": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "title": "UnsignedData",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "required": [
                                                            "event_id",
                                                            "sender",
                                                            "origin_server_ts"
                                                        ],
                                                        "title": "SyncRoomEvent",
                                                        "type": "object"
                                                    }
                                                ],
                                                "description": "Room Events have the following fields.",
                                                "properties": {
                                                    "room_id": {
                                                        "description": "The ID of the room associated with this event. Will not be present on events\nthat arrive through ``/sync``, despite being required everywhere else.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "room_id"
                                                ],
                                                "title": "RoomEvent",
                                                "type": "object"
                                            },
                                            {
                                                "allOf": [
                                                    {
                                                        "allOf": [
                                                            {
                                                                "description": "The basic set of fields all events must have.",
                                                                "properties": {
                                                                    "content": {
                                                                        "description": "The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.",
                                                                        "type": "object"
                                                                    },
                                                                    "type": {
                                                                        "description": "The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "type",
                                                                    "content"
                                                                ],
                                                                "title": "Event",
                                                                "type": "object"
                                                            }
                                                        ],
                                                        "description": "In addition to the Event fields, Room Events have the following additional fields.",
                                                        "properties": {
                                                            "event_id": {
                                                                "description": "The globally unique event identifier.",
                                                                "type": "string"
                                                            },
                                                            "origin_server_ts": {
                                                                "description": "Timestamp in milliseconds on originating homeserver when this event was sent.",
                                                                "format": "int64",
                                                                "type": "integer"
                                                            },
                                                            "sender": {
                                                                "description": "Contains the fully-qualified ID of the user who sent this event.",
                                                                "type": "string"
                                                            },
                                                            "unsigned": {
                                                                "description": "Contains optional extra information about the event.",
                                                                "properties": {
                                                                    "age": {
                                                                        "description": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                                                                        "type": "integer"
                                                                    },
                                                                    "redacted_because": {
                                                                        "description": "The event that redacted this event, if any.",
                                                                        "title": "Event",
                                                                        "type": "object"
                                                                    },
                                                                    "transaction_id": {
                                                                        "description": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "title": "UnsignedData",
                                                                "type": "object"
                                                            }
                                                        },
                                                        "required": [
                                                            "event_id",
                                                            "sender",
                                                            "origin_server_ts"
                                                        ],
                                                        "title": "SyncRoomEvent",
                                                        "type": "object"
                                                    }
                                                ],
                                                "description": "In addition to the Room Event fields, State Events have the following additional fields.",
                                                "properties": {
                                                    "prev_content": {
                                                        "description": "Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.",
                                                        "title": "EventContent",
                                                        "type": "object"
                                                    },
                                                    "state_key": {
                                                        "description": "A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.\nState keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "state_key"
                                                ],
                                                "title": "SyncStateEvent",
                                                "type": "object"
                                            }
                                        ],
                                        "description": "State Events have the following fields.",
                                        "title": "StateEvent",
                                        "type": "object"
                                    }
                                ],
                                "title": "StateEvent",
                                "type": "object"
                            },
                            "title": "RoomState",
                            "type": "array"
                        }
                    },
                    "403": {
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n"
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Get all state events in the current state of a room.",
                "tags": [
                    "Room participation"
                ]
            }
        },
        "/rooms/{roomId}/state/{eventType}/{stateKey}": {
            "get": {
                "description": ".. For backwards compatibility with older links...\n.. _`get-matrix-client-%CLIENT_MAJOR_VERSION%-rooms-roomid-state-eventtype`:\n\nLooks up the contents of a state event in a room. If the user is\njoined to the room then the state is taken from the current\nstate of the room. If the user has left the room then the state is\ntaken from the state of the room when they left.",
                "operationId": "getRoomStateWithKey",
                "parameters": [
                    {
                        "description": "The room to look up the state in.",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:example.com"
                    },
                    {
                        "description": "The type of state to look up.",
                        "in": "path",
                        "name": "eventType",
                        "required": true,
                        "type": "string",
                        "x-example": "m.room.name"
                    },
                    {
                        "description": "The key of the state to look up. Defaults to an empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
                        "in": "path",
                        "name": "stateKey",
                        "required": true,
                        "type": "string",
                        "x-example": ""
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The content of the state event.",
                        "examples": {
                            "application/json": {
                                "name": "Example room name"
                            }
                        },
                        "schema": {
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "You aren't a member of the room and weren't previously a member of the room.\n"
                    },
                    "404": {
                        "description": "The room has no state with the given type or key."
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Get the state identified by the type and key.",
                "tags": [
                    "Room participation"
                ]
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https",
        "http"
    ],
    "securityDefinitions": {
        "accessToken": {
            "description": "The access_token returned by a call to ``/login`` or ``/register``",
            "in": "query",
            "name": "access_token",
            "type": "apiKey"
        }
    },
    "swagger": "2.0"
}