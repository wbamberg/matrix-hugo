{
    "__meta": {
        "base": "/_matrix/client/%CLIENT_MAJOR_VERSION%",
        "endpoints": [
            {
                "deprecated": false,
                "desc": ".. For backwards compatibility with older links...\n.. _`put-matrix-client-%CLIENT_MAJOR_VERSION%-rooms-roomid-state-eventtype`:\n\nState events can be sent using this endpoint.  These events will be\noverwritten if ``<room id>``, ``<event type>`` and ``<state key>`` all\nmatch.\n\nRequests to this endpoint **cannot use transaction IDs**\nlike other ``PUT`` paths because they cannot be differentiated from the\n``state_key``. Furthermore, ``POST`` is unsupported on state paths.\n\nThe body of the request should be the content object of the event; the\nfields in this object will vary depending on the type of event. See\n`Room Events`_ for the ``m.`` event specification.\n\nIf the event type being sent is ``m.room.canonical_alias`` servers\nSHOULD ensure that any new aliases being listed in the event are valid\nper their grammar/syntax and that they point to the room ID where the\nstate event is to be sent. Servers do not validate aliases which are\nbeing removed or are already present in the state event.\n",
                "example": {
                    "req": "PUT /_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/%21636q39766251%3Aexample.com/state/m.room.member/%40alice%3Aexample.com HTTP/1.1\nContent-Type: application/json\n\n{\n  \"membership\": \"join\",\n  \"avatar_url\": \"mxc://localhost/SEsfnsuifSDFSSEF\",\n  \"displayname\": \"Alice Margatroid\"\n}"
                },
                "method": "PUT",
                "path": "/_matrix/client/%CLIENT_MAJOR_VERSION%/rooms/{roomId}/state/{eventType}/{stateKey}",
                "rate_limited": false,
                "req_body_tables": [],
                "req_param_by_loc": {
                    "path": [
                        {
                            "desc": "**Required.** The room to set the state in",
                            "key": "roomId",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "**Required.** The type of event to send.",
                            "key": "eventType",
                            "required": false,
                            "title": "string"
                        },
                        {
                            "desc": "**Required.** The state_key for the state to send. Defaults to the empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
                            "key": "stateKey",
                            "required": false,
                            "title": "string"
                        }
                    ]
                },
                "requires_auth": true,
                "res_headers": null,
                "res_tables": [
                    [
                        null,
                        null,
                        [
                            {
                                "desc": "**Required.** A unique identifier for the event.",
                                "key": "event_id",
                                "required": true,
                                "title": "string"
                            }
                        ]
                    ]
                ],
                "responses": [
                    {
                        "code": 200,
                        "description": "An ID for the sent event.",
                        "example": "{\n  \"event_id\": \"$YUwRidLecu:example.com\"\n}"
                    },
                    {
                        "code": 400,
                        "description": "The sender's request is malformed.\n\nSome example error codes include:\n\n* ``M_INVALID_PARAMETER``: One or more aliases within the ``m.room.canonical_alias``\n  event have invalid syntax.\n\n* ``M_BAD_ALIAS``: One or more aliases within the ``m.room.canonical_alias`` event\n  do not point to the room ID for which the state event is to be sent to.",
                        "example": "{\n  \"errcode\": \"M_BAD_ALIAS\",\n  \"error\": \"The alias '#hello:example.org' does not point to this room.\"\n}"
                    },
                    {
                        "code": 403,
                        "description": "The sender doesn't have permission to send the event into the room.",
                        "example": "{\n  \"errcode\": \"M_FORBIDDEN\",\n  \"error\": \"You do not have permission to send the event.\"\n}"
                    }
                ],
                "title": "Send a state event to the given room."
            }
        ],
        "group": "room_state_cs"
    },
    "basePath": "/_matrix/client/%CLIENT_MAJOR_VERSION%",
    "consumes": [
        "application/json"
    ],
    "host": "localhost:8008",
    "info": {
        "title": "Matrix Client-Server state event send API",
        "version": "1.0.0"
    },
    "paths": {
        "/rooms/{roomId}/state/{eventType}/{stateKey}": {
            "put": {
                "description": ".. For backwards compatibility with older links...\n.. _`put-matrix-client-%CLIENT_MAJOR_VERSION%-rooms-roomid-state-eventtype`:\n\nState events can be sent using this endpoint.  These events will be\noverwritten if ``<room id>``, ``<event type>`` and ``<state key>`` all\nmatch.\n\nRequests to this endpoint **cannot use transaction IDs**\nlike other ``PUT`` paths because they cannot be differentiated from the\n``state_key``. Furthermore, ``POST`` is unsupported on state paths.\n\nThe body of the request should be the content object of the event; the\nfields in this object will vary depending on the type of event. See\n`Room Events`_ for the ``m.`` event specification.\n\nIf the event type being sent is ``m.room.canonical_alias`` servers\nSHOULD ensure that any new aliases being listed in the event are valid\nper their grammar/syntax and that they point to the room ID where the\nstate event is to be sent. Servers do not validate aliases which are\nbeing removed or are already present in the state event.\n",
                "operationId": "setRoomStateWithKey",
                "parameters": [
                    {
                        "description": "The room to set the state in",
                        "in": "path",
                        "name": "roomId",
                        "required": true,
                        "type": "string",
                        "x-example": "!636q39766251:example.com"
                    },
                    {
                        "description": "The type of event to send.",
                        "in": "path",
                        "name": "eventType",
                        "required": true,
                        "type": "string",
                        "x-example": "m.room.member"
                    },
                    {
                        "description": "The state_key for the state to send. Defaults to the empty string. When\nan empty string, the trailing slash on this endpoint is optional.",
                        "in": "path",
                        "name": "stateKey",
                        "required": true,
                        "type": "string",
                        "x-example": "@alice:example.com"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "example": {
                                "avatar_url": "mxc://localhost/SEsfnsuifSDFSSEF",
                                "displayname": "Alice Margatroid",
                                "membership": "join"
                            },
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An ID for the sent event.",
                        "examples": {
                            "application/json": {
                                "event_id": "$YUwRidLecu:example.com"
                            }
                        },
                        "schema": {
                            "properties": {
                                "event_id": {
                                    "description": "A unique identifier for the event.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "event_id"
                            ],
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "The sender's request is malformed.\n\nSome example error codes include:\n\n* ``M_INVALID_PARAMETER``: One or more aliases within the ``m.room.canonical_alias``\n  event have invalid syntax.\n\n* ``M_BAD_ALIAS``: One or more aliases within the ``m.room.canonical_alias`` event\n  do not point to the room ID for which the state event is to be sent to.",
                        "examples": {
                            "application/json": {
                                "errcode": "M_BAD_ALIAS",
                                "error": "The alias '#hello:example.org' does not point to this room."
                            }
                        },
                        "schema": {
                            "description": "A Matrix-level Error",
                            "properties": {
                                "errcode": {
                                    "description": "An error code.",
                                    "example": "M_UNKNOWN",
                                    "type": "string"
                                },
                                "error": {
                                    "description": "A human-readable error message.",
                                    "example": "An unknown error occurred",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "errcode"
                            ],
                            "type": "object"
                        }
                    },
                    "403": {
                        "description": "The sender doesn't have permission to send the event into the room.",
                        "examples": {
                            "application/json": {
                                "errcode": "M_FORBIDDEN",
                                "error": "You do not have permission to send the event."
                            }
                        },
                        "schema": {
                            "description": "A Matrix-level Error",
                            "properties": {
                                "errcode": {
                                    "description": "An error code.",
                                    "example": "M_UNKNOWN",
                                    "type": "string"
                                },
                                "error": {
                                    "description": "A human-readable error message.",
                                    "example": "An unknown error occurred",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "errcode"
                            ],
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "summary": "Send a state event to the given room.",
                "tags": [
                    "Room participation"
                ]
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https",
        "http"
    ],
    "securityDefinitions": {
        "accessToken": {
            "description": "The access_token returned by a call to ``/login`` or ``/register``",
            "in": "query",
            "name": "access_token",
            "type": "apiKey"
        }
    },
    "swagger": "2.0"
}