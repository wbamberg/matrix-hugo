{
    "content_fields": [
        [
            null,
            null,
            [
                {
                    "desc": "**Required.** The opaque identifier for the verification process/request.",
                    "key": "transaction_id",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** A human readable description of the ``code``. The client should only rely on this\nstring if it does not understand the ``code``.",
                    "key": "reason",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** The error code for why the process/request was cancelled by the user. Error\ncodes should use the Java package naming convention if not in the following\nlist:\n\n``m.user``: The user cancelled the verification.\n\n``m.timeout``: The verification process timed out. Verification processes\ncan define their own timeout parameters.\n\n``m.unknown_transaction``: The device does not know about the given transaction\nID.\n\n``m.unknown_method``: The device does not know how to handle the requested\nmethod. This should be sent for ``m.key.verification.start`` messages and\nmessages defined by individual verification processes.\n\n``m.unexpected_message``: The device received an unexpected message. Typically\nraised when one of the parties is handling the verification out of order.\n\n``m.key_mismatch``: The key was not verified.\n\n``m.user_mismatch``: The expected user did not match the user verified.\n\n``m.invalid_message``: The message received was invalid.\n\n``m.accepted``: A ``m.key.verification.request`` was accepted by a different\n  device. The device receiving this error can ignore the verification request.\n\nClients should be careful to avoid error loops. For example, if a device sends\nan incorrect message and the client returns ``m.invalid_message`` to which it\ngets an unexpected response with ``m.unexpected_message``, the client should not\nrespond again with ``m.unexpected_message`` to avoid the other device potentially\nsending another error response.\n\n.. The above blank line is important for RST.",
                    "key": "code",
                    "required": true,
                    "title": "string"
                }
            ]
        ]
    ],
    "desc": "Cancels a key verification process/request. Typically sent as a `to-device`_ event.",
    "msgtype": null,
    "title": null,
    "type": "m.key.verification.cancel",
    "type_with_msgtype": null,
    "typeof": "",
    "typeof_info": ""
}