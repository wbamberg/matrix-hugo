{
    "content_fields": [
        [
            "EventContent",
            null,
            [
                {
                    "desc": "The avatar URL for this user, if any.",
                    "key": "avatar_url",
                    "required": false,
                    "title": "string"
                },
                {
                    "desc": "The display name for this user, if any.",
                    "key": "displayname",
                    "required": false,
                    "title": "string or null"
                },
                {
                    "desc": "**Required.** The membership state of the user. One of: [\"invite\", \"join\", \"knock\", \"leave\", \"ban\"]",
                    "key": "membership",
                    "required": true,
                    "title": "enum"
                },
                {
                    "desc": "Flag indicating if the room containing this event was created with the intention of being a direct chat. See `Direct Messaging`_.",
                    "key": "is_direct",
                    "required": false,
                    "title": "boolean"
                },
                {
                    "desc": "",
                    "key": "third_party_invite",
                    "required": false,
                    "title": "Invite"
                }
            ]
        ],
        [
            "Invite",
            null,
            [
                {
                    "desc": "**Required.** A name which can be displayed to represent the user instead of their third party identifier",
                    "key": "display_name",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.",
                    "key": "signed",
                    "required": true,
                    "title": "signed"
                }
            ]
        ],
        [
            "signed",
            null,
            [
                {
                    "desc": "**Required.** The invited matrix user ID. Must be equal to the user_id property of the event.",
                    "key": "mxid",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.",
                    "key": "signatures",
                    "required": true,
                    "title": "Signatures"
                },
                {
                    "desc": "**Required.** The token property of the containing third_party_invite object.",
                    "key": "token",
                    "required": true,
                    "title": "string"
                }
            ]
        ],
        [
            "UnsignedData",
            null,
            [
                {
                    "desc": "The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.",
                    "key": "age",
                    "required": false,
                    "title": "integer"
                },
                {
                    "desc": "The event that redacted this event, if any.",
                    "key": "redacted_because",
                    "required": false,
                    "title": "Event"
                },
                {
                    "desc": "The client-supplied transaction ID, for example, provided via\n``PUT /_matrix/client/r0/rooms/{roomId}/send/{eventType}/{txnId}``,\nif the client being given the event is the same one which sent it.\n",
                    "key": "transaction_id",
                    "required": false,
                    "title": "string"
                },
                {
                    "desc": "A subset of the state of the room at the time of the invite, if ``membership`` is ``invite``. Note that this state is informational, and SHOULD NOT be trusted; once the client has joined the room, it SHOULD fetch the live state from the server and discard the invite_room_state. Also, clients must not rely on any particular state being present here; they SHOULD behave properly (with possibly a degraded but not a broken experience) in the absence of any particular events here. If they are set on the room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``, ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.",
                    "key": "invite_room_state",
                    "required": false,
                    "title": "[StrippedState]"
                }
            ]
        ],
        [
            "StrippedState",
            null,
            [
                {
                    "desc": "**Required.** The ``content`` for the event.",
                    "key": "content",
                    "required": true,
                    "title": "EventContent"
                },
                {
                    "desc": "**Required.** The ``state_key`` for the event.",
                    "key": "state_key",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** The ``type`` for the event.",
                    "key": "type",
                    "required": true,
                    "title": "string"
                },
                {
                    "desc": "**Required.** The ``sender`` for the event.",
                    "key": "sender",
                    "required": true,
                    "title": "string"
                }
            ]
        ]
    ],
    "desc": "Adjusts the membership state for a user in a room. It is preferable to use the membership APIs (``/rooms/<room id>/invite`` etc) when performing membership actions rather than adjusting the state directly as there are a restricted set of valid transformations. For example, user A cannot force user B to join a room, and trying to force this state change directly will fail.\n\nThe following membership states are specified:\n\n- ``invite`` - The user has been invited to join a room, but has not yet joined it. They may not participate in the room until they join.\n\n- ``join`` - The user has joined the room (possibly after accepting an invite), and may participate in it.\n\n- ``leave`` - The user was once joined to the room, but has since left (possibly by choice, or possibly by being kicked).\n\n- ``ban`` - The user has been banned from the room, and is no longer allowed to join it until they are un-banned from the room (by having their membership state set to a value other than ``ban``).\n\n- ``knock`` - This is a reserved word, which currently has no meaning.\n\nThe ``third_party_invite`` property will be set if this invite is an ``invite`` event and is the successor of an ``m.room.third_party_invite`` event, and absent otherwise.\n\nThis event may also include an ``invite_room_state`` key inside the event's ``unsigned`` data.\nIf present, this contains an array of ``StrippedState`` Events. These events provide information\non a subset of state events such as the room name.\n\nThe user for which a membership applies is represented by the ``state_key``. Under some conditions,\nthe ``sender`` and ``state_key`` may not match - this may be interpreted as the ``sender`` affecting\nthe membership state of the ``state_key`` user.\n\nThe ``membership`` for a given user can change over time. The table below represents the various changes\nover time and how clients and servers must interpret those changes. Previous membership can be retrieved\nfrom the ``prev_content`` object on an event. If not present, the user's previous membership must be assumed\nas ``leave``.\n\n.. TODO: Improve how this table is written? We use a csv-table to get around vertical header restrictions.\n\n.. csv-table::\n  :header-rows: 1\n  :stub-columns: 1\n\n  \"\",\"to ``invite``\",\"to ``join``\",\"to ``leave``\",\"to ``ban``\",\"to ``knock``\"\n  \"from ``invite``\",\"No change.\",\"User joined the room.\",\"If the ``state_key`` is the same as the ``sender``, the user rejected the invite. Otherwise, the ``state_key`` user had their invite revoked.\",\"User was banned.\",\"Not implemented.\"\n  \"from ``join``\",\"Must never happen.\",\"``displayname`` or ``avatar_url`` changed.\",\"If the ``state_key`` is the same as the ``sender``, the user left. Otherwise, the ``state_key`` user was kicked.\",\"User was kicked and banned.\",\"Not implemented.\"\n  \"from ``leave``\",\"New invitation sent.\",\"User joined.\",\"No change.\",\"User was banned.\",\"Not implemented.\"\n  \"from ``ban``\",\"Must never happen.\",\"Must never happen.\",\"User was unbanned.\",\"No change.\",\"Not implemented.\"\n  \"from ``knock``\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\",\"Not implemented.\"",
    "msgtype": null,
    "title": "The current membership state of a user in the room.",
    "type": "m.room.member",
    "type_with_msgtype": null,
    "typeof": "State Event",
    "typeof_info": "``state_key``: The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is\n``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,\nunlike other events. Regular authorisation rules still apply."
}